// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// WeiszfeldMedianRcpp
Rcpp::List WeiszfeldMedianRcpp(const arma::mat& X, const arma::rowvec& init_median, const arma::rowvec& weights, double epsilon, int nitermax);
RcppExport SEXP _RMM_WeiszfeldMedianRcpp(SEXP XSEXP, SEXP init_medianSEXP, SEXP weightsSEXP, SEXP epsilonSEXP, SEXP nitermaxSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type init_median(init_medianSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type weights(weightsSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  Rcpp::traits::input_parameter< int >::type nitermax(nitermaxSEXP);
  rcpp_result_gen = Rcpp::wrap(WeiszfeldMedianRcpp(X, init_median, weights, epsilon, nitermax));
  return rcpp_result_gen;
  END_RCPP
}
// WeiszfeldMedianCovarianceRcpp
Rcpp::List WeiszfeldMedianCovarianceRcpp(const arma::mat& X, const arma::rowvec& median_est, const arma::mat& init_median_cov, const arma::rowvec& weights, double epsilon, int nitermax);
RcppExport SEXP _RMM_WeiszfeldMedianCovarianceRcpp(SEXP XSEXP, SEXP median_estSEXP, SEXP init_median_covSEXP, SEXP weightsSEXP, SEXP epsilonSEXP, SEXP nitermaxSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type median_est(median_estSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type init_median_cov(init_median_covSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type weights(weightsSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  Rcpp::traits::input_parameter< int >::type nitermax(nitermaxSEXP);
  rcpp_result_gen = Rcpp::wrap(WeiszfeldMedianCovarianceRcpp(X, median_est, init_median_cov, weights, epsilon, nitermax));
  return rcpp_result_gen;
  END_RCPP
}
// ASGMedianRcpp
Rcpp::List ASGMedianRcpp(const arma::mat& X, const arma::rowvec& init_median, const arma::rowvec& weights, double gamma, double alpha, int nstart, double epsilon);
RcppExport SEXP _RMM_ASGMedianRcpp(SEXP XSEXP, SEXP init_medianSEXP, SEXP weightsSEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP nstartSEXP, SEXP epsilonSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type init_median(init_medianSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type weights(weightsSEXP);
  Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
  Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
  Rcpp::traits::input_parameter< int >::type nstart(nstartSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  rcpp_result_gen = Rcpp::wrap(ASGMedianRcpp(X, init_median, weights, gamma, alpha, nstart, epsilon));
  return rcpp_result_gen;
  END_RCPP
}
// ASGMedianCovarianceRcpp
Rcpp::List ASGMedianCovarianceRcpp(const arma::mat& X, const arma::rowvec& median_est, const arma::mat& init_median_cov, const arma::rowvec& weights, double gamma, double alpha, int nstart);
RcppExport SEXP _RMM_ASGMedianCovarianceRcpp(SEXP XSEXP, SEXP median_estSEXP, SEXP init_median_covSEXP, SEXP weightsSEXP, SEXP gammaSEXP, SEXP alphaSEXP, SEXP nstartSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type median_est(median_estSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type init_median_cov(init_median_covSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type weights(weightsSEXP);
  Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
  Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
  Rcpp::traits::input_parameter< int >::type nstart(nstartSEXP);
  rcpp_result_gen = Rcpp::wrap(ASGMedianCovarianceRcpp(X, median_est, init_median_cov, weights, gamma, alpha, nstart));
  return rcpp_result_gen;
  END_RCPP
}
// robbinsMCRcpp
Rcpp::List robbinsMCRcpp(const arma::mat& U, const arma::vec& delta, arma::vec init, arma::vec init_bar, double gamma, double c, double w, double c_bar, double c_tilde, double sumlog, double epsilon, IntegerVector out_index);
RcppExport SEXP _RMM_robbinsMCRcpp(SEXP USEXP, SEXP deltaSEXP, SEXP initSEXP, SEXP init_barSEXP, SEXP gammaSEXP, SEXP cSEXP, SEXP wSEXP, SEXP c_barSEXP, SEXP c_tildeSEXP, SEXP sumlogSEXP, SEXP epsilonSEXP, SEXP out_indexSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
  Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
  Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
  Rcpp::traits::input_parameter< arma::vec >::type init_bar(init_barSEXP);
  Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
  Rcpp::traits::input_parameter< double >::type c(cSEXP);
  Rcpp::traits::input_parameter< double >::type w(wSEXP);
  Rcpp::traits::input_parameter< double >::type c_bar(c_barSEXP);
  Rcpp::traits::input_parameter< double >::type c_tilde(c_tildeSEXP);
  Rcpp::traits::input_parameter< double >::type sumlog(sumlogSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  Rcpp::traits::input_parameter< IntegerVector >::type out_index(out_indexSEXP);
  rcpp_result_gen = Rcpp::wrap(robbinsMCRcpp(U, delta, init, init_bar, gamma, c, w, c_bar, c_tilde, sumlog, epsilon, out_index));
  return rcpp_result_gen;
  END_RCPP
}
// fixMCRcpp
Rcpp::List fixMCRcpp(const arma::mat& U, const arma::vec& delta, arma::vec init, int niter, double epsilon, IntegerVector out_index);
RcppExport SEXP _RMM_fixMCRcpp(SEXP USEXP, SEXP deltaSEXP, SEXP initSEXP, SEXP niterSEXP, SEXP epsilonSEXP, SEXP out_indexSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
  Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
  Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
  Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  Rcpp::traits::input_parameter< IntegerVector >::type out_index(out_indexSEXP);
  rcpp_result_gen = Rcpp::wrap(fixMCRcpp(U, delta, init, niter, epsilon, out_index));
  return rcpp_result_gen;
  END_RCPP
}
// gradMCRcpp
Rcpp::List gradMCRcpp(const arma::mat& U, const arma::vec& delta, arma::vec init, int niter, double epsilon, NumericVector step, IntegerVector out_index);
RcppExport SEXP _RMM_gradMCRcpp(SEXP USEXP, SEXP deltaSEXP, SEXP initSEXP, SEXP niterSEXP, SEXP epsilonSEXP, SEXP stepSEXP, SEXP out_indexSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
  Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
  Rcpp::traits::input_parameter< arma::vec >::type init(initSEXP);
  Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
  Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
  Rcpp::traits::input_parameter< NumericVector >::type step(stepSEXP);
  Rcpp::traits::input_parameter< IntegerVector >::type out_index(out_indexSEXP);
  rcpp_result_gen = Rcpp::wrap(gradMCRcpp(U, delta, init, niter, epsilon, step, out_index));
  return rcpp_result_gen;
  END_RCPP
}
// update_median_covarianceRcpp
List update_median_covarianceRcpp(const arma::mat& X, arma::rowvec m, arma::rowvec moyennem, arma::mat V, arma::mat moyenneV, int Ninit, int niterr, int batch, double gamman, double w, double sslog);
RcppExport SEXP _RMM_update_median_covarianceRcpp(SEXP XSEXP, SEXP mSEXP, SEXP moyennemSEXP, SEXP VSEXP, SEXP moyenneVSEXP, SEXP NinitSEXP, SEXP niterrSEXP, SEXP batchSEXP, SEXP gammanSEXP, SEXP wSEXP, SEXP sslogSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
  Rcpp::traits::input_parameter< arma::rowvec >::type m(mSEXP);
  Rcpp::traits::input_parameter< arma::rowvec >::type moyennem(moyennemSEXP);
  Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
  Rcpp::traits::input_parameter< arma::mat >::type moyenneV(moyenneVSEXP);
  Rcpp::traits::input_parameter< int >::type Ninit(NinitSEXP);
  Rcpp::traits::input_parameter< int >::type niterr(niterrSEXP);
  Rcpp::traits::input_parameter< int >::type batch(batchSEXP);
  Rcpp::traits::input_parameter< double >::type gamman(gammanSEXP);
  Rcpp::traits::input_parameter< double >::type w(wSEXP);
  Rcpp::traits::input_parameter< double >::type sslog(sslogSEXP);
  rcpp_result_gen = Rcpp::wrap(update_median_covarianceRcpp(X, m, moyennem, V, moyenneV, Ninit, niterr, batch, gamman, w, sslog));
  return rcpp_result_gen;
  END_RCPP
}
// normalize_columnsRcpp
arma::mat normalize_columnsRcpp(const arma::mat& V);
RcppExport SEXP _RMM_normalize_columnsRcpp(SEXP VSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type V(VSEXP);
  rcpp_result_gen = Rcpp::wrap(normalize_columnsRcpp(V));
  return rcpp_result_gen;
  END_RCPP
}
// reconstruct_covarianceRcpp
arma::mat reconstruct_covarianceRcpp(const arma::mat& VP, const arma::rowvec& lambda);
RcppExport SEXP _RMM_reconstruct_covarianceRcpp(SEXP VPSEXP, SEXP lambdaSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::mat& >::type VP(VPSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type lambda(lambdaSEXP);
  rcpp_result_gen = Rcpp::wrap(reconstruct_covarianceRcpp(VP, lambda));
  return rcpp_result_gen;
  END_RCPP
}
// mahalanobis_generalizedRcpp
double mahalanobis_generalizedRcpp(const arma::rowvec& x, const arma::rowvec& moyennem, const arma::mat& eigvecs, const arma::rowvec& lambdaInit);
RcppExport SEXP _RMM_mahalanobis_generalizedRcpp(SEXP xSEXP, SEXP moyennemSEXP, SEXP eigvecsSEXP, SEXP lambdaInitSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter< const arma::rowvec& >::type x(xSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type moyennem(moyennemSEXP);
  Rcpp::traits::input_parameter< const arma::mat& >::type eigvecs(eigvecsSEXP);
  Rcpp::traits::input_parameter< const arma::rowvec& >::type lambdaInit(lambdaInitSEXP);
  rcpp_result_gen = Rcpp::wrap(mahalanobis_generalizedRcpp(x, moyennem, eigvecs, lambdaInit));
  return rcpp_result_gen;
  END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
  {"_RMM_WeiszfeldMedianRcpp", (DL_FUNC) &_RMM_WeiszfeldMedianRcpp, 5},
  {"_RMM_WeiszfeldMedianCovarianceRcpp", (DL_FUNC) &_RMM_WeiszfeldMedianCovarianceRcpp, 6},
  {"_RMM_ASGMedianRcpp", (DL_FUNC) &_RMM_ASGMedianRcpp, 7},
  {"_RMM_ASGMedianCovarianceRcpp", (DL_FUNC) &_RMM_ASGMedianCovarianceRcpp, 7},
  {"_RMM_robbinsMCRcpp", (DL_FUNC) &_RMM_robbinsMCRcpp, 12},
  {"_RMM_fixMCRcpp", (DL_FUNC) &_RMM_fixMCRcpp, 6},
  {"_RMM_gradMCRcpp", (DL_FUNC) &_RMM_gradMCRcpp, 7},
  {"_RMM_update_median_covarianceRcpp", (DL_FUNC) &_RMM_update_median_covarianceRcpp, 11},
  {"_RMM_normalize_columnsRcpp", (DL_FUNC) &_RMM_normalize_columnsRcpp, 1},
  {"_RMM_reconstruct_covarianceRcpp", (DL_FUNC) &_RMM_reconstruct_covarianceRcpp, 2},
  {"_RMM_mahalanobis_generalizedRcpp", (DL_FUNC) &_RMM_mahalanobis_generalizedRcpp, 4},
  {NULL, NULL, 0}
};

RcppExport void R_init_RMM(DllInfo *dll) {
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
