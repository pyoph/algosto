true_pos_final[i] = sum(data$labelsVrais == 0 & outl[,i] == 0)/((1 - r/100)*n)
true_neg_final[i] = sum(data$labelsVrais == 1 & outl[,i] == 1)/((r/100)*n)
}
# Créer le dataframe pour ggplot
plot_data <- data.frame(
taux_contamination = rList,
true_pos = true_pos_final
)
# Déterminer les breaks pour l'axe Y (tous les 500)
y_breaks <- seq(0, max(true_pos_final, na.rm = TRUE) + 500, by = 500)
# Créer le plot avec graduations
ggplot(plot_data, aes(x = taux_contamination, y = true_pos)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(color = "red", size = 2, alpha = 0.7) +
labs(
title = "True positives with true paramaters",
x = "Contamination rate (r)",
y = "true positives"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray80", linewidth = 0.2),
panel.grid.minor = element_line(color = "gray90", linewidth = 0.1)
) +
scale_x_continuous(labels = function(x) paste0(x, "%")) +
scale_y_continuous(
breaks = y_breaks,
minor_breaks = NULL  # Enlève les graduations mineures pour plus de clarté
)
true_pos_final
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
contParam = ParmsF1(m1, k, l, rho1)
cutoff = qchisq(.95,df=d)
outl = matrix(0,n,length(rList))
labvrais = matrix(0,n,length(rList))
faux_neg_final = rep(0,length(rList))
faux_pos_final = rep(0,length(rList))
true_neg_final = rep(0,length(rList))
true_pos_final = rep(0,length(rList))
for (i in seq_along(rList)){
r = rList[i]
data = genererEchantillon(n,n,mu1 = mu0,mu2 = contParam$mu1,Sigma1 = Sigma0,Sigma2 = contParam$Sigma1,r)
Z = data$Z
labvrais[,i] = data$labelsVrais
mu2 = contParam$mu1
Sigma2 = contParam$Sigma1
for (j in 1:nrow(Z))
{
if(data$labelsVrais[j] == 1){
dist= t(Z[j,] - mu2)%*%solve(Sigma2)%*%(Z[j,] - mu2)}
else {dist= t(Z[j,])%*%solve(Sigma0)%*%(Z[j,])}
if (dist > cutoff) {outl[j,i] = 1}
}
faux_neg_final[i] = sum(data$labelsVrais == 1 & outl[,i] == 0)/((r/100)*n)
faux_pos_final[i] = sum(data$labelsVrais == 0 & outl[,i] == 1)/((1 - r/100)*n)
true_pos_final[i] = sum(data$labelsVrais == 1 & outl[,i] == 1)/((1 - r/100)*n)
true_neg_final[i] = sum(data$labelsVrais == 0 & outl[,i] == 0)/((r/100)*n)
}
# Créer le dataframe pour ggplot
plot_data <- data.frame(
taux_contamination = rList,
true_pos = true_pos_final
)
# Déterminer les breaks pour l'axe Y (tous les 500)
y_breaks <- seq(0, max(true_pos_final, na.rm = TRUE) + 500, by = 500)
# Créer le plot avec graduations
ggplot(plot_data, aes(x = taux_contamination, y = true_pos)) +
geom_line(color = "blue", linewidth = 1) +
geom_point(color = "red", size = 2, alpha = 0.7) +
labs(
title = "True positives with true paramaters",
x = "Contamination rate (r)",
y = "true positives"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "gray80", linewidth = 0.2),
panel.grid.minor = element_line(color = "gray90", linewidth = 0.1)
) +
scale_x_continuous(labels = function(x) paste0(x, "%")) +
scale_y_continuous(
breaks = y_breaks,
minor_breaks = NULL  # Enlève les graduations mineures pour plus de clarté
)
true_pos_final
faux_pos_final
true_neg_final
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
contParam = ParmsF1(m1, k, l, rho1)
cutoff = qchisq(.95,df=d)
outl = matrix(0,n,length(rList))
labvrais = matrix(0,n,length(rList))
faux_neg_final = rep(0,length(rList))
faux_pos_final = rep(0,length(rList))
true_neg_final = rep(0,length(rList))
true_pos_final = rep(0,length(rList))
for (i in seq_along(rList)){
r = rList[i]
data = genererEchantillon(n,n,mu1 = mu0,mu2 = contParam$mu1,Sigma1 = Sigma0,Sigma2 = contParam$Sigma1,r)
Z = data$Z
labvrais[,i] = data$labelsVrais
mu2 = contParam$mu1
Sigma2 = contParam$Sigma1
for (j in 1:nrow(Z))
{
if(data$labelsVrais[j] == 1){
dist= t(Z[j,] - mu2)%*%solve(Sigma2)%*%(Z[j,] - mu2)}
else {dist= t(Z[j,])%*%solve(Sigma0)%*%(Z[j,])}
if (dist > cutoff) {outl[j,i] = 1}
}
faux_neg_final[i] = sum(data$labelsVrais == 1 & outl[,i] == 0)/((r/100)*n)
faux_pos_final[i] = sum(data$labelsVrais == 0 & outl[,i] == 1)/((1 - r/100)*n)
true_pos_final[i] = sum(data$labelsVrais == 1 & outl[,i] == 1)/((1 - r/100)*n)
true_neg_final[i] = sum(data$labelsVrais == 0 & outl[,i] == 0)/((1 - r/100)*n)
}
true_neg_final
true_pos_final
k = klval[1]
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[1]
l = l1val[1]
rho1 = rho1val[1]
for (l in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,l,3,1],
online_us = erreursSigmaNear[,l,2,1],
online_naive = erreursSigmaNear[,l,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
for (l in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,l,3,1],
online_us = erreursSigmaNear[,l,2,1],
online_naive = erreursSigmaNear[,l,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/")
load(file = "resultsSelectedScenarios/erreursNearScenarios.RData")
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
for (l in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,l,3,1],
online_us = erreursSigmaNear[,l,2,1],
online_naive = erreursSigmaNear[,l,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,l,3,1],
online_us = erreursSigmaNear[,l,2,1],
online_naive = erreursSigmaNear[,l,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,m,3,1],
online_us = erreursSigmaNear[,m,2,1],
online_naive = erreursSigmaNear[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
load(file = "~/algosto/resultsSelectedScenarios/erreursMedScenarios.RData")
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[3]
l = l1val[3]
rho1 = rho1val[3]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaMed[,m,3,1],
online_us = erreursSigmaMed[,m,2,1],
online_naive = erreursSigmaMed[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
l1val
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[3]
l = l1val[6]
rho1 = rho1val[3]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaMed[,m,3,1],
online_us = erreursSigmaMed[,m,2,1],
online_naive = erreursSigmaMed[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k,l, " = l "," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[3]
l = l1val[6]
rho1 = rho1val[3]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaMed[,m,3,1],
online_us = erreursSigmaMed[,m,2,1],
online_naive = erreursSigmaMed[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k, " l = ",l," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[2]
l = l1val[2]
rho1 = rho1val[2]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,m,3,1],
online_us = erreursSigmaNear[,m,2,1],
online_naive = erreursSigmaNear[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k, " l = ",l," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
k1val
l1val
rho1val
setwd("~/algosto/resultsSelectedScenarios/figures/covarianceEstimation/")
k = k1val[4]
l = l1val[7]
rho1 = rho1val[4]
for (m in seq_along(rList)){
# Créer un dataframe avec les trois séries
plot_data <- data.frame(
index = 1:nrow(Z),
streaming = erreursSigmaNear[,m,3,1],
online_us = erreursSigmaNear[,m,2,1],
online_naive = erreursSigmaNear[,m,1,1]
)
# Créer le graphique
p = ggplot(plot_data, aes(x = index)) +
geom_line(aes(y = streaming, linetype = "Streaming"), linewidth = 1) +
geom_line(aes(y = online_us, linetype = "Online US"), linewidth = 1) +
geom_line(aes(y = online_naive, linetype = "Online Naive"), linewidth = 1) +
scale_linetype_manual(
name = "Method",
values = c("Streaming" = "solid", "Online US" = "dashed", "Online Naive" = "dotted")
) +
labs(
title = "",
x = "Observation Index",
y = "Frobenius norm error"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
r = rList[m]
# Sauvegarder le plot en PNG
filename <- paste0("k = ", k, " l = ",l," rho1 = ",rho1, "r = ", r, ".png")
ggsave(filename, plot = p, width = 10, height = 6, dpi = 300)
}
